

****  node -e "console.log(require('crypto'). randomBytes(64).toString('hex'))"    use this to create a token






JWT Generation on First Login:

When the user first logs in, the server generates a JSON Web Token (JWT). This token includes the user’s information (like their user ID) and is signed using a secret key.
The token is sent to the client and stored (e.g., in localStorage or cookies).
Token Validity (72 Hours):

The JWT is valid for 72 hours from the time it is generated.
During these 72 hours, the user doesn’t need to log in again. They can simply use the stored token to access protected pages on the website. The server will verify the token and grant access.
Login After 72 Hours:

After 72 hours, the token expires. The user will need to log in again to get a new JWT.
The server will generate a new token, and the process repeats.
So, once the user logs in and gets the JWT, they can continue using the site without re-authenticating for 72 hours. After that, they need to log in again to get a new token.










/**
 * Purpose of Generating a Random String and Using It as a Secret Key for JWT:
 * -------------------------------------------------------
 * The generated string (such as the one shown below) is used as a **secret key** 
 * to **sign** a **JSON Web Token (JWT)**. This process ensures the token's integrity 
 * and authenticity.
 * 
 * Example of a generated string:
 * -------------------------------------------------------
 * 1edc439323121b94836b9cb691f97793bb86a5c8d73030e158e57e68743886caef772ed3254945fd92d11fb218fa63df3cc753d06210c092daalacb26
 * 
 * This is a **cryptographically secure random value**, generated using Node.js's `crypto` module.
 * It is used to create a **secret key** for signing the JWT.
 * 
 * Purpose of `ACCESS_TOKEN_SECRET`:
 * -------------------------------------------------------
 * The generated secret key is then stored in an environment variable `ACCESS_TOKEN_SECRET`:
 * 
 * ACCESS_TOKEN_SECRET=a2b79359cf1cb8d28662eb12500492ed3188ca44c6aa19732e60bd48b5810729622f4468ccce72bf1a091f80ac1118a6d822e777ef2bbd99eaf0a377f85256b9
 * 
 * The secret is stored securely in the environment to avoid hardcoding sensitive information in the codebase.
 * Using environment variables helps **secure** the secret key, making it harder for attackers to access.
 * 
 * Usage in JWT Creation:
 * -------------------------------------------------------
 * The `ACCESS_TOKEN_SECRET` is used in the following code to sign the JWT:
 * 
 * const accessToken = jwt.sign({ userId: user._id }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: "72H" });
 * 
 * Here’s what happens:
 * -------------------------------------------------------
 * 1. **Payload**: `{ userId: user._id }` – The payload contains the data that will be stored in the JWT (in this case, the user’s unique identifier).
 * 2. **Secret Key**: `process.env.ACCESS_TOKEN_SECRET` – This is the **secret key** used to sign the token. The secret ensures the token cannot be altered or forged. Only the server that knows the secret can generate and verify valid tokens.
 * 3. **Expiration**: `{ expiresIn: "72H" }` – This sets an expiration time for the token. The token will automatically expire in 72 hours, after which the user will need to authenticate again.
 * 
 * Purpose of Using the Secret Key for JWT:
 * -------------------------------------------------------
 * 1. **Authentication**: JWTs are used for **stateless authentication**. After the user logs in, the server generates a JWT and sends it to the client. The client includes this token in future requests to access protected routes.
 * 
 * 2. **Tamper-Proof**: The secret key ensures that the token’s contents cannot be tampered with. If someone changes the payload (like modifying the `userId`), the signature will no longer match, and the token will be considered invalid.
 * 
 * 3. **Secure Data Transmission**: By signing the JWT with the secret key, the server can trust that the token's data (like the user ID) has not been modified during transmission.
 * 
 * 4. **Session Management**: JWTs help avoid storing session data on the server. The necessary user data is stored directly in the token, and the server simply verifies the token to authenticate users.
 * 
 * 5. **Expiration and Security**: The token is given an expiration time (`expiresIn: "72H"`) to automatically invalidate after a set period, requiring the user to re-authenticate. This helps ensure that sessions don’t remain active indefinitely, enhancing security.
 * 
 * Why the Random String (`ACCESS_TOKEN_SECRET`) is Used:
 * -------------------------------------------------------
 * 1. **Security**: The random string ensures that the secret key is unpredictable and secure. It is used to sign the JWT, making sure the token can’t be forged.
 * 2. **Integrity**: The secret key guarantees that the contents of the JWT cannot be modified without detection.
 * 3. **Unpredictability**: The randomness of the key makes it difficult for attackers to guess the secret and forge valid tokens.
 * 
 * Summary:
 * -------------------------------------------------------
 * - The random string (`ACCESS_TOKEN_SECRET`) is used to **sign** the **JWT**, which contains the user’s data (e.g., `userId`).
 * - The secret key ensures that the token is **secure** and **tamper-proof**.
 * - The JWT is used for **stateless authentication** and **secure data transmission** between the server and the client.
 * - The expiration time (`72H`) ensures that the token is automatically invalidated after 72 hours.
 */
