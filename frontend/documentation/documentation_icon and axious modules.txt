npm i react-icons
npm i axios
npm i react-toastify  // it is used to pop the updated things

/**
# **Understanding `react-icons` and `axios` in Depth**

Both `react-icons` and `axios` are essential libraries in React development, but they serve completely different purposes. Below is a **detailed breakdown** of what they do, why they are used, and how you can utilize them effectively in your React projects.

---

## **1️⃣ `react-icons`**
### **🔹 What is `react-icons`?**
`react-icons` is a library that provides popular icon sets as **React components**. Instead of manually importing SVG or PNG icons, you can use this package to **dynamically** render icons in your React application.

### **🔹 Why Use `react-icons`?**
✅ **Lightweight & Efficient:** Uses React components instead of importing entire icon libraries.  
✅ **Scalability:** Icons are **vector-based**, meaning they don’t lose quality when resized.  
✅ **Customizable:** You can modify color, size, and style directly in your JSX.  
✅ **Supports Multiple Icon Sets:** Font Awesome, Material Icons, Bootstrap Icons, etc.

### **🔹 How to Install `react-icons`**
```sh
npm install react-icons
```
or  
```sh
yarn add react-icons
```

### **🔹 How to Use `react-icons`**
Once installed, you can **import** and **use** any icon from the supported icon libraries.

#### **🟢 Example Usage: Using FontAwesome Icons**
```jsx
import { FaReact } from "react-icons/fa";  // Importing a React icon

const MyComponent = () => {
  return (
    <div>
      <h1>Welcome to My App <FaReact size={40} color="blue" /></h1>
    </div>
  );
};

export default MyComponent;
```

#### **🟠 Example Usage: Using Material Design Icons**
```jsx
import { MdHome } from "react-icons/md";

const HomeIcon = () => <MdHome size={30} color="green" />;

export default HomeIcon;
```

### **🔹 Supported Icon Libraries in `react-icons`**
| **Icon Library** | **Prefix** | **Example** |
|-----------------|-----------|------------|
| Font Awesome | `Fa` | `<FaReact />` |
| Material Design | `Md` | `<MdHome />` |
| Bootstrap Icons | `Bs` | `<BsFillStarFill />` |
| Remix Icons | `Ri` | `<RiShoppingCartFill />` |
| Heroicons | `Hi` | `<HiOutlineMenu />` |

---

## **2️⃣ `axios`**
### **🔹 What is `axios`?**
`axios` is a **promise-based HTTP client** for making API requests in JavaScript applications. It simplifies **sending HTTP requests** (GET, POST, PUT, DELETE, etc.) to APIs and handling responses.

### **🔹 Why Use `axios`?**
✅ **Handles API Requests Easily:** Simplifies calling external APIs from React.  
✅ **Promise-Based:** Uses `async/await`, making requests easier to read and handle.  
✅ **Supports Request Interceptors:** Modify requests before they are sent (e.g., adding authentication tokens).  
✅ **Automatic JSON Parsing:** Converts API responses into usable JavaScript objects.  
✅ **Handles Timeouts and Errors Gracefully:** Supports built-in error handling and retry mechanisms.  

### **🔹 How to Install `axios`**
```sh
npm install axios
```
or  
```sh
yarn add axios
```

### **🔹 How to Use `axios`**
#### **🟢 Basic GET Request**
```jsx
import axios from "axios";
import { useEffect, useState } from "react";

const FetchData = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    axios.get("https://jsonplaceholder.typicode.com/posts/1")
      .then(response => setData(response.data))
      .catch(error => console.error("Error fetching data:", error));
  }, []);

  return (
    <div>
      <h2>Post Title: {data?.title}</h2>
    </div>
  );
};

export default FetchData;
```

#### **🟠 Making a POST Request**
```jsx
import axios from "axios";

const createPost = async () => {
  try {
    const response = await axios.post("https://jsonplaceholder.typicode.com/posts", {
      title: "New Post",
      body: "This is a new post",
      userId: 1
    });
    console.log("Post created:", response.data);
  } catch (error) {
    console.error("Error creating post:", error);
  }
};
```

#### **🔵 Setting Up an `axios` Instance for Authentication**
```jsx
import axios from "axios";

const axiosInstance = axios.create({
  baseURL: "https://api.example.com",
  timeout: 10000,
  headers: { "Content-Type": "application/json" }
});

// Request Interceptor: Adds Token to Requests
axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
}, (error) => Promise.reject(error));

export default axiosInstance;
```

---

## **🆚 Comparison: `react-icons` vs. `axios`**
| Feature | `react-icons` | `axios` |
|---------|--------------|---------|
| Purpose | Provides icons in React as components | Handles API requests in React |
| Type | UI/Styling | Data Fetching/Networking |
| Usage | Adds icons to UI | Fetches data from APIs |
| Example | `<FaReact size={40} />` | `axios.get("https://api.example.com")` |

---

## **📌 Conclusion**
- Use **`react-icons`** to add **beautiful and scalable icons** to your React project.
- Use **`axios`** to **fetch, send, and manage API data** efficiently.

Both packages are **essential** for modern React development. 🚀
*/




